<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cezary Tworzewski</title>
  
  <subtitle>Learning Front-end</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://cezarytworzewski.github.io/"/>
  <updated>2018-06-14T17:25:29.342Z</updated>
  <id>https://cezarytworzewski.github.io/</id>
  
  <author>
    <name>Cezary Tworzewski</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jaka jest różnica pomiędzy znacznikiem img &amp; background-image?</title>
    <link href="https://cezarytworzewski.github.io/2018/06/14/img-vs-background-image/"/>
    <id>https://cezarytworzewski.github.io/2018/06/14/img-vs-background-image/</id>
    <published>2018-06-13T22:00:00.000Z</published>
    <updated>2018-06-14T17:25:29.342Z</updated>
    
    <content type="html"><![CDATA[<p>Wszystko zaczęło się od <em>chęci</em> umieszczenia baneru na stronie www.<br>Tylko jak to poprawnie zrobić?</p><h2 id="Znacznik-img"><a href="#Znacznik-img" class="headerlink" title="Znacznik img"></a>Znacznik <code>img</code></h2><p>Znacznik <code>img</code> służy do dodawania  pliku graficznego do naszej strony<br>internetowej. Jest to znacznik samozamykający.<br><strong>Nie robimy czegoś takiego jak <code>&lt;/img&gt;</code></strong></p><p>Znacznik ten posiada również atrybuty:</p><ul><li>najważniejszy to atrybut <code>src</code> - gdzie pomiędzy cudzysłowy dodajemy<br>  ścieżkę do naszego obrazka,</li><li>kolejny atrybut to <code>alt</code> - atrybut ten posiada alternatywny tekst<br>  dla naszego obrazka. Jeśli podamy złą ścieżkę do obrazka to wyświetli<br>  nam się <strong>tekst alternatywny</strong>,<br>  Atrybut <code>alt</code> możemy jeszcze spotkać w sytuacji, jeśli usuniemy nasz<br>  obrazek z serwera, a strona dalej będzie istnieć i odwoływać się do<br>  ścieżki na serwerze (oczywiście, tego obrazka już nie ma),</li><li>atrybut <code>title</code> - jeśli najedziemy kursorem myszy na zdjęcie to<br>  pojawi się tekst obrazka</li><li><p>kolejne atrybuty to <code>height</code> oraz <code>width</code>:</p><ul><li><code>height</code> - wysokość grafiki</li><li><p><code>width</code> - szerokość grafiki</p><p>Służą one do zmiany rozmiarów wyświetlającego obrazek.</p></li></ul></li><li><p>jeszcze inny atrybut to <code>align</code> - służy do wyrównywania obrazków w<br>  poziomie.</p><p>  Atrybut <code>align</code> posiada dwie wartości:</p><ul><li><code>left</code></li><li><code>right</code></li></ul></li></ul><p>Przykładowy kod z użyciem znacznika <code>img</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/images/computer.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://piecioshka.pl/assets/images/posts/post-banner-hexo-setup-blog.png"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Regula-background-image"><a href="#Regula-background-image" class="headerlink" title="Reguła background-image"></a>Reguła <code>background-image</code></h2><p>Reguła, ta ustawia obrazek tła dla elementu.</p><p>Wygląda to tak: <code>background-image: url(ścieżka-do-obrazka)</code></p><p>Mamy stworzony kod <code>HTML</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"banner"</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p>W pliku np. <code>style/main.css</code> odwołujemy się do reguły <code>background-image</code><br>po to, aby dodać nasz długo oczekiwany baner:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">"../images/baner-biblioteka.jpg"</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">421px</span>;</span><br><span class="line">    <span class="attribute">width</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Wszystko-ladnie-pieknie-ale-kiedy-stosowac-jedno-albo-drugie"><a href="#Wszystko-ladnie-pieknie-ale-kiedy-stosowac-jedno-albo-drugie" class="headerlink" title="Wszystko ładnie, pięknie - ale kiedy stosować jedno albo drugie?"></a>Wszystko ładnie, pięknie - ale kiedy stosować jedno albo drugie?</h3><p>Podchodząc do tworzenia projektu trzeba najpierw się zastanowić nad tym,<br>czy dane tło ma być takie samo na wszystkich podstronach czy nie.<br><strong>Musimy wiedzieć dlaczego chcemy użyć tej właściwości</strong></p><p>Jeśli dodamy plik za pomocą <code>CSS</code> to muszę pamiętać, że:</p><ul><li>będę mógł zmienić tryb wyświetlania w <code>background-image</code>, czyli ustawić<br>  <code>position</code> albo <code>repeat</code> lub <code>no-repat</code></li><li>jeśli nie planuję zmieniać baneru (grafiki) na stronie powinienem użyć<br>  <code>background-image</code></li><li>nie będę mógł zapisać grafiki jeśli kliknę prawym przyciskiem myszy</li><li>nie będę mógł zaznaczyć obrazka</li></ul><p>Jeśli dodam plik za pomocą znacznika <code>img</code> to muszę pamiętać, że:</p><ul><li>mogę zapisać obrazek za pomocą prawego przycisku myszy</li><li>mogę zaznaczyć obrazek</li><li>obrazek mogę dodać do każdej podstrony osobno, a później będę mógł w<br>  bardzo łatwy sposób podmienić grafikę gdzie chcemy</li></ul><h2 id="Definicja-img-amp-backgroung-image"><a href="#Definicja-img-amp-backgroung-image" class="headerlink" title="Definicja img &amp; backgroung-image"></a>Definicja <code>img</code> &amp; <code>backgroung-image</code></h2><ul><li><code>img</code> - to skrót od <code>images</code><pre><code>- `images`(ang. *obrazek*)</code></pre></li><li><code>background</code>- (ang. <em>tło</em>)<pre><code>- `background-images` - mogę przetłumaczyć jako `tło obrazkowe`</code></pre></li></ul><p><code>img</code> służy do dodawania zdjęcia, obrazków, natomiast <code>background-image</code><br>służy do dodawania tła na stronie</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Wszystko zaczęło się od &lt;em&gt;chęci&lt;/em&gt; umieszczenia baneru na stronie www.&lt;br&gt;Tylko jak to poprawnie zrobić?&lt;/p&gt;
&lt;h2 id=&quot;Znacznik-img&quot;&gt;&lt;a
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nauka JavaScript od podstaw (2)</title>
    <link href="https://cezarytworzewski.github.io/2018/06/13/podstawy-js-2/"/>
    <id>https://cezarytworzewski.github.io/2018/06/13/podstawy-js-2/</id>
    <published>2018-06-12T22:00:00.000Z</published>
    <updated>2018-06-13T10:46:59.159Z</updated>
    
    <content type="html"><![CDATA[<p>Ogólnie rzecz biorąc, zaczynam od początku <em>JavaScript</em>, ale mnóstwo rzeczy wiem - <em>tak czuję, albo wydaję mi się</em>! :)</p><p>Dzisiaj skupie się na tekstowym typie danych <strong>String</strong>, typie liczbowym <strong>Number</strong>, <strong>true</strong>, <strong>false</strong> i wartości <strong>true &amp; false</strong>. A dzisiejsza przygodę zakończę z <strong>null vs. undefined</strong>.</p><h1 id="Tekstowy-typ-danych-String"><a href="#Tekstowy-typ-danych-String" class="headerlink" title="Tekstowy typ danych String."></a>Tekstowy typ danych <code>String</code>.</h1><p>Warto powiedzieć, że tekstwoy typ danych zapisujemy za pomocą apostrofów <code>&#39; &#39;</code> albo cudzysłowów <code>&quot; &quot;</code>.<br>Jest to obojętne jaką konwencje użyjemy, ale zawsze powinniśmy stosować tylko jedną. Między innymi po to, aby nasz kod był czytelny dla nas, ale również dla naszych kolegów po fachu.</p><p>Zadeklarujemy sobie zmienną <code>firstName</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let firstName = &apos;Jan&apos;;</span><br></pre></td></tr></table></figure></p><p>Stworzyliśmy własnie zmienną <code>firstName</code> i przypisaliśmy do niej wartość <code>Jan</code>.</p><p>Żeby sprawdzić jaki typ danych ma nasza zmienna używamy to takich działań operatora <code>typeof</code>.</p><p><code>typeof firstName</code> =&gt; Wynikiem jest: <strong><em>String</em></strong></p><p>Dlatego jeśli wartość naszej zmiennej posiada <code>&#39;  &#39;</code> albo <code>&quot;  &quot;</code> to wiem, że jest to typ <strong><em>String</em></strong>.</p><blockquote><p><strong>!!! Tekstowy typ danych to <em>String</em> !!!</strong></p></blockquote><h4 id="Przyklady"><a href="#Przyklady" class="headerlink" title="Przykłady:"></a>Przykłady:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let firstName = &apos;Jan&apos;;</span><br><span class="line">let lastName = &quot;Kowalski&quot;;</span><br></pre></td></tr></table></figure><h4 id="Zalozmy-ze-mamy-tytul-ksiazki-albo-cytat-Zazwyczaj-umieszczamy-je-w-quot-quot-Jak-to-zrobic-w-JavaScript"><a href="#Zalozmy-ze-mamy-tytul-ksiazki-albo-cytat-Zazwyczaj-umieszczamy-je-w-quot-quot-Jak-to-zrobic-w-JavaScript" class="headerlink" title="Załóżmy, że mamy tytuł ksiązki albo cytat. Zazwyczaj umieszczamy je w &quot; &quot;. Jak to zrobić w JavaScript?"></a>Załóżmy, że mamy tytuł ksiązki albo cytat. Zazwyczaj umieszczamy je w <code>&quot; &quot;</code>. Jak to zrobić w JavaScript?</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let bookTitle = &quot;Władca pierścieni&quot;</span><br></pre></td></tr></table></figure><p>Wywołuję sobie to w konsoli przeglądarki. Wynik to:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bookTitle // wywołuję sobie zmienną</span><br><span class="line"> &quot;Władca Pierścieni&quot; // jest to wynik, posiada cudzysłowy, ale są to cudzysłowy informujące, że wartośc jest String,</span><br></pre></td></tr></table></figure><p>Żeby zrobić cydzysłów okreslający tytuł książk to robię to tak:</p><p><code>let bookTitle = &quot;&#39;Władca Pierścieni&#39;&quot;;</code></p><p><em>albo:</em></p><p><code>let bookTitle = &#39;&quot;Władca Pierścieni&quot;&#39;;</code></p><p><em>inny sposób to:</em></p><p><code>let bookTitle = &quot;\&quot;Władca Pierścieni\&quot;&quot;;</code></p><h1 id="Liczbowy-typ-danych-Number"><a href="#Liczbowy-typ-danych-Number" class="headerlink" title="Liczbowy typ danych Number."></a>Liczbowy typ danych <code>Number</code>.</h1><p><strong>Number</strong> to liczbowy typ danych, dzięki nim możemy przechowywać liczby, wartości liczbowe, liczby całkowite czy wartości zmiennoprzecinkowe. Zapisujemy je troszkę inaczej niż <code>String</code> tzn. zapisujemy je bez użycia cudzysłowów.</p><ul><li><p>liczba całkowita:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let number = 20;</span><br></pre></td></tr></table></figure></li><li><p>liczba zmiennoprzecinkowa:</p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let number = 20.5;</span><br></pre></td></tr></table></figure><p>   Do tworzenia liczb zmiennoprzecinkowych używamy <em>kropki</em></p></li></ul><p>W JavaScript mamy też zmienne (stałe), czyli <strong>Infinity</strong> i <strong>-Infinity</strong>:</p><p><code>Infinity</code> =&gt; 1.797693134862315E+308</p><p><code>-Infinity</code> =&gt; 1.797693134862316E+308</p><p>Posiadamy również taką wartość jak <strong>NaN</strong> (<em>Not a Number</em>):</p><ul><li>to nie jest wartość liczbowa, jest tylko skojarzona jako typ liczbowy</li><li>jeśli będziemy robić jakieś obliczenia, a wnikiem nie będzie nowa liczba, to zostanie zwrócona wartość <strong>Nan</strong></li></ul><h1 id="Prawda-falsz-wartosci-true-amp-false"><a href="#Prawda-falsz-wartosci-true-amp-false" class="headerlink" title="Prawda, fałsz, wartości true &amp; false"></a>Prawda, fałsz, wartości true &amp; false</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let isLoggedIn = true;</span><br><span class="line"></span><br><span class="line">if(isLoggedIn) &#123;</span><br><span class="line">    console.log(&apos;Zalogowano&apos;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    console.log(&apos;Nie zalogowano&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>to jest bardzo istotna linia: <code>if(isLoggedIn)</code> w środku nawiasu <strong>zawsze</strong> jest prawda. To nie musi być zmienna <code>isLoggedIn</code>, może to być dowolna inna zmienna.<br>Zgodnie z wartością zmiennej <code>isLoggedIn</code> zmienna ta ma wartość <code>true</code>, póżniej w <strong>instrukcji warunkowej</strong> sprawdzam czy <code>isLoggedIn</code> jest prawdziwe. Jeśli prawdziwe to wykonam kod <code>console.log(&#39;Zalogowano&#39;);</code></p><h4 id="Wartosci-falszywe-to"><a href="#Wartosci-falszywe-to" class="headerlink" title="Wartości fałszywe to:"></a>Wartości fałszywe to:</h4><ul><li>false</li><li>0</li><li>“ “</li><li>null</li><li>undefined</li><li>NaN</li></ul><p>Przykład:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let value = 0;</span><br><span class="line"></span><br><span class="line">if(value) &#123;</span><br><span class="line">    console.log(&apos;Ta wartość nie jest fałszywa&apos;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    console.log(&apos;Wartość jest fałszywa&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="null-vs-undefined"><a href="#null-vs-undefined" class="headerlink" title="null vs. undefined"></a>null vs. undefined</h1><p>Są to wartości fałszywe!!! - ale nie oto teraz chodzi.</p><p><code>let yourName;</code> Sprawdzam swoją zmienną za pomocą <code>typeof</code>, czyli <code>typeof yourName</code>. Wynikiem jest <code>&quot;undefined&quot;</code>. Jeśli się dwołamy bezpośrednio do zmiennej w konsoli, czyli wpiszemy: <code>yourName;</code> to wynik również wskazuje na <code>undefined</code></p><p>Jedno <code>undefined</code> posiada cydzysłowy a drugie nie w powyższym opisie. Musimy pamiętać, że:</p><blockquote><p>Operator <code>typeof</code> <strong>zawsze</strong> zwraca <code>String</code>, ale wartość tego String jest <code>undefined</code>.</p></blockquote><p>Jeśli utworzymy zmienną, ale nie przypiszemy do niej żadnej wartości, to ma ona wartość <code>undefined</code>:</p><ul><li><code>let yourName;</code> - wartość zmiennej to <em><code>undefined</code></em></li></ul><p>Jeśli, chcemy <strong>z góry</strong>, aby zadeklarowana zmienna miała wartośc pustą to przypiszemy do niej wartość <strong>null</strong>:</p><ul><li><code>let yourName = null;</code></li></ul><p>Sprawdźmy jedną rzecz:</p><ul><li><code>typeof null</code> - zwróci nam <code>object</code>, ale <strong>STOP</strong></li></ul><p><strong>!!! <em>null</em> NIE JEST OBIEKTEM !!!</strong></p><h5 id="Jak-to-ma-sie-do-obiektow"><a href="#Jak-to-ma-sie-do-obiektow" class="headerlink" title="Jak to ma się do obiektów ?"></a>Jak to ma się do obiektów ?</h5><p><code>let person = {};</code>, sprawdźmy za pomocą <code>typeof person.name</code> =&gt; Wynik to: <code>&quot;undefined&quot;</code></p><p>Dlaczego tak jest???</p><p><code>Ponieważ próbujemy się odwołać do czegoś, czego nie ma. W tym wypadku próbujemy sie odwołać do właściwości name obiektu person</code></p><p>Jeśli chcem, aby ta właściwość była pusta to możemy zrobić to tak:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let person = &#123;</span><br><span class="line">    name: null</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Teraz <code>typeof person.name</code> będzie miał wartość <code>object</code>.</p><p>Jeśli wynikiem kiedyś będzie <code>null</code>, to muszę pamiętać, że zmienna została już zadeklarowana, ale nic nie zostało do niej pzypisane. Przy <code>undefined</code> wartość nigdy nie została ustawiona.</p><h5 id="Podsumowujac"><a href="#Podsumowujac" class="headerlink" title="Podsumowując"></a>Podsumowując</h5><p>Lekcja ta, też nie była dla mnie skomplikowana. Wydaje mi się, że rozumiem o co w niej chodzi. Wykonałem parę ćwiczeń wraz z <strong>Piotr Palarz</strong> i jestem zadowolony :-)</p><p>Jeżeli popełniłem jakieś błędy w opisie lekcji, albo uważacie, że nie bardzo jednak to rozumiem, to proszę  dajcie znać w komentarzach!</p><p><strong><em>Pozdrawiam! :-)</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ogólnie rzecz biorąc, zaczynam od początku &lt;em&gt;JavaScript&lt;/em&gt;, ale mnóstwo rzeczy wiem - &lt;em&gt;tak czuję, albo wydaję mi się&lt;/em&gt;! :)&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nauka Linux&#39;a od podstaw (2)</title>
    <link href="https://cezarytworzewski.github.io/2018/06/08/podstawy-linux-2/"/>
    <id>https://cezarytworzewski.github.io/2018/06/08/podstawy-linux-2/</id>
    <published>2018-06-07T22:00:00.000Z</published>
    <updated>2018-06-08T09:56:56.100Z</updated>
    
    <content type="html"><![CDATA[<p>W tym artykule opiszę to czego się nauczyłem, czyli: <strong>instalacja oprogramowania</strong>, <strong>dowiązania w Linux</strong>, <strong>mechanizm CRON</strong></p><p>Warto wspomnieć, że instalować paczki <strong>rpm</strong> może jedynie użytkownik z uprawnieniami <strong>roota</strong>!!!</p><h1 id="Instalacja-oprogramowania"><a href="#Instalacja-oprogramowania" class="headerlink" title="Instalacja oprogramowania"></a>Instalacja oprogramowania</h1><ol><li>Na podstawie systemu CentOS do instalacji oprogramowania służą nam dwa narzędzia:</li></ol><ul><li>narzędzia automatyczne: <strong>yum</strong></li><li>narzędzia do paczek: <strong>rpm</strong></li></ul><p><strong>Instalacja z paczki wygląda następująco</strong></p><ul><li>musimy pobrać odpowiednią paczkę - która jest zgodna z naszą architekturą systemu</li><li>wydajemy polecenie:<ul><li><code>rpm -i teamviewer_linux.rpm</code> albo lepszym rozwiązaniem będzie:<ul><li><code>rpm -Uvh teamviewer_linux.rpm</code> =&gt; gdzie poszczególne parametry oznaczają:<ul><li><code>U</code> - jest to inaczej polecenie <code>install</code> ale dodatkowo robi nam <code>update</code> naszej paczki</li><li><code>v</code> - wyświetla nam informacje co aktualnie się wykonuje podczas instalacji</li><li><code>h</code> - wyświetla nam procentoway pasek postępu</li></ul></li></ul></li></ul></li></ul><p><strong>Instalacja z narzędziem autoomatycznym:</strong></p><ul><li><code>yum install cups</code> - gdzie <strong>cups</strong> jest to serwer wydruku</li></ul><h1 id="Dowiazania-w-Linux’ie"><a href="#Dowiazania-w-Linux’ie" class="headerlink" title="Dowiązania w Linux’ie"></a>Dowiązania w Linux’ie</h1><ol><li>Wyrożniamy dwa <code>dowiązania</code> w Linux:</li></ol><ul><li><strong>symboliczne</strong></li><li><strong>twarde</strong></li></ul><h4 id="Dowiazanie-symboliczne"><a href="#Dowiazanie-symboliczne" class="headerlink" title="Dowiązanie symboliczne:"></a>Dowiązanie symboliczne:</h4><ul><li>przechodze do katalogu domowego:<br>  <code>cd ~</code></li><li><p>tworzę folder i przechodze do niego:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir linki</span><br><span class="line">cd linki/</span><br></pre></td></tr></table></figure></li><li><p>utworzę sobie plik tekstowy:</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim plik.txt</span><br></pre></td></tr></table></figure><p>  uzupełniam go zawartością po czym zapisuję. Więcej o edytorze VIM znajdziesz <a href="https://www.cezarytworzewski.github.io/blog/2018/06/07/podstawy-linux-1/" target="_blank" rel="noopener">tutaj</a></p></li><li>sprawdzam zawartość <strong>plik.txt</strong>:<br>  <code>cat plik.txt</code></li><li><p>teraz chce utworzyć <strong>skrót</strong> do pliku o nazwie <strong>plik.txt</strong>:</p><ul><li>tworzę folder <strong>dowiazania</strong> w lokalizacji <strong>tmp</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /tmp/dowiazania/</span><br><span class="line">cd /tmp/dowiazania/</span><br></pre></td></tr></table></figure></li></ul></li><li><p>teraz tworzę dowiązanie do pliku:<br>  <code>ln -s plik.txt /tmp/dowiazania/</code> - parametr <strong>s</strong> oznacza, że symboliczne</p></li><li><p>przechodzę do katalogu <strong>dowiazania</strong>:</p><p>  <code>cd /tmp/dowiazania/</code></p><p>  <code>ls</code> - wyświetlam zawartość folderu <strong>dowiozania</strong></p><p>  <code>ls -l</code></p></li></ul><h4 id="Dowiazania-twarde"><a href="#Dowiazania-twarde" class="headerlink" title="Dowiązania twarde:"></a>Dowiązania twarde:</h4><ul><li><p>jestem w katalogu <strong>linki/</strong><br>  <code>ln plik.txt plik2.txt</code></p><p>  Jeśli w poleceniu <code>ln</code> nie damy parametru to zostanie utworzone dowiązanie twarde</p><p>  <strong>Wyświetlimy sobie katalog:</strong><br>  <code>cd /linki</code></p><p>  <code>ls</code></p><p>  <code>ls -l</code>  parametr <strong>l</strong> wyświetla wszystko - uprawnienia, data, godzina, user. Pierwsza kolumna oznacza uprawnienia do pliku, natomiast druga to cyfra np: <strong>1</strong>, z każdym dowiązaniem twardym liczba będzie rosnąć.</p></li></ul><h1 id="UWAGA"><a href="#UWAGA" class="headerlink" title="!!! UWAGA !!!"></a>!!! UWAGA !!!</h1><ul><li><strong>dowiązanie symboliczne</strong> mogę tworzyć na innych partycjach</li><li>Natomiast <strong>dowiąznia twarde</strong> musi znajdować się na partycji, w którym znajduje się oryginalny plik</li></ul><h1 id="Mechanizm-CRON"><a href="#Mechanizm-CRON" class="headerlink" title="Mechanizm CRON"></a>Mechanizm CRON</h1><p><strong>Mechanizm CRON</strong> jest to odpowienik <strong>Menadżera zadań</strong> w <strong>Windows</strong>. Możemy zdefiniować jakieś zadanie. Zakładam, że nie ma nas przy komputerze a coś musi się wykonać np. jakaś aktualizacja systemu, albo tworzenie automatycznych logów w systemie.</p><p>Mechanizm CRON posiada <strong>7 pozycji:</strong>:</p><p><code>* * * * * root touch /tmp/plik.txt</code></p><p><strong>Co oznaczają poszczególne pozycje:</strong></p><table><thead><tr><th style="text-align:center"><strong>Pozycja</strong></th><th style="text-align:center"><strong>Odpowiednik</strong></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">minuta</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">godzina</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">miesiąc</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">dzień miesiąca</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">dzień tygodnia</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">użytkownik</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">zadanie do wykonania</td></tr></tbody></table><p>Mechanizmu CRON używa się do uruchamiania zadań (programów, komend, skryptów) o konkretnej godzinie, dniu…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;W tym artykule opiszę to czego się nauczyłem, czyli: &lt;strong&gt;instalacja oprogramowania&lt;/strong&gt;, &lt;strong&gt;dowiązania w Linux&lt;/strong&gt;, &lt;st
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nauka Linux&#39;a od podstaw (1)</title>
    <link href="https://cezarytworzewski.github.io/2018/06/07/podstawy-linux-1/"/>
    <id>https://cezarytworzewski.github.io/2018/06/07/podstawy-linux-1/</id>
    <published>2018-06-06T22:00:00.000Z</published>
    <updated>2018-06-14T17:39:31.357Z</updated>
    
    <content type="html"><![CDATA[<p>Jak wiecie, dodatkiem do mojej nauki <code>Front-end&#39;u</code> jest nauka <code>Linux&#39;a</code>.<br>Fizycznie posiadam <code>Ubuntu</code> i na maszynie wirtualnej <code>CentOS</code>.</p><h2 id="Podstawowe-polcenie"><a href="#Podstawowe-polcenie" class="headerlink" title="Podstawowe polcenie:"></a>Podstawowe polcenie:</h2><p><code>pwd</code> - wskazuje bierzącą lokalizację (ścieżkę) w jakiej się znajdujemy<br><code>cd ..</code> - zejście do katalogu wcześniej<br><code>cd ../..</code> - przechodzi dwa poziomy do tyłu<br><code>clear</code> - czyści nam ekran<br><code>whoami</code> - sprawdza nam, kto jest zalgowany aktualnie, jaki user</p><h3 id="W-czym-moze-pomoc-nam-przycisk-na-klawiaturze-TAB"><a href="#W-czym-moze-pomoc-nam-przycisk-na-klawiaturze-TAB" class="headerlink" title="W czym może pomóc nam przycisk na klawiaturze TAB?"></a>W czym może pomóc nam przycisk na klawiaturze <code>TAB</code>?</h3><p>Przycisk ten dopisuje na ‘drugą’ część polecenia! :)</p><h3 id="Co-to-sciezka-bezwzgledna"><a href="#Co-to-sciezka-bezwzgledna" class="headerlink" title="Co to ścieżka bezwzgledna?"></a>Co to ścieżka bezwzgledna?</h3><p>To jest coś w stylu <code>pwd</code>. Przykład:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /home/cezary/Dokumenty/</span><br></pre></td></tr></table></figure><p>Czyli jest to cała ścieżka dostępu.</p><h3 id="Co-to-jest-sciezka-wzgledna"><a href="#Co-to-jest-sciezka-wzgledna" class="headerlink" title="Co to jest ścieżka względna?"></a>Co to jest ścieżka względna?</h3><p>W najprostszym dla mnie rozumieniu jest to przechodzenie stopniowe do katalogów, katalog po katalogu. Przykład poniżej:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd home</span><br><span class="line">cd cezary</span><br><span class="line">cd Dokumenty</span><br></pre></td></tr></table></figure><h3 id="O-nieee-Gdzie-szukac-pomocy-Nie-dziala-mi-to"><a href="#O-nieee-Gdzie-szukac-pomocy-Nie-dziala-mi-to" class="headerlink" title="O nieee! Gdzie szukać pomocy? Nie działa mi to!"></a>O nieee! Gdzie szukać pomocy? Nie działa mi to!</h3><p>Najpoluparniejszymi źródłami, z którego możemy czerpać wiedzę i<br>możliwość rozwiązywania problemów jest:</p><ul><li><a href="http://www.linux.pl" target="_blank" rel="noopener">Linux.pl</a></li><li><a href="http://www.forum.linux.pl" target="_blank" rel="noopener">Forum Linuxa</a></li></ul><h2 id="PLIKI-i-KATALOGI"><a href="#PLIKI-i-KATALOGI" class="headerlink" title="PLIKI i KATALOGI"></a>PLIKI i KATALOGI</h2><p><strong>Najpopularnijesze polcenia to:</strong></p><ul><li><code>mkdir</code> - tworzy nam katalog. Przykład: <code>mkdir JavaScript</code></li><li><code>rmdir</code> - usuwa nam plik lub pusty katalog</li><li><code>touch</code> - tworzy nam pliki wszelkiego typu. Pliki tekstowe, pliki<br>  <code>html</code>, <code>css</code> czy nawet pliki <code>js</code>. Możemy tworzyć kilka plików na<br>  raz -&gt; <code>touch plik1.txt plik2.txt index.htmk</code>. Więcej do poczytania<br>  na <a href="https://piecioshka.pl/blog/2018/05/21/jak-stworzyc-3-pliki-o-roznych-rozszerzeniach.html" target="_blank" rel="noopener">Jak stworzyć 3 pliki o różnych rozszerzeniach za pomocą 1 polecenia?</a></li><li><code>rm</code> - usunięcie pliku lib niepustego katalogu. Aby usunąć katalog<br>  wraz z zawartością wywołujmey polecenie <code>rm</code> z parametrem <code>r</code> –&gt; <code>rm -r Dokumenty</code>.</li><li><code>cp</code> - kopiuje pliki lub katalogi w różne miejsca</li><li><code>mv</code> - przeniesienie pliku lub katalogu (wycinanie). Zmienia też nazwę.</li></ul><h2 id="KOPIOWANIE"><a href="#KOPIOWANIE" class="headerlink" title="KOPIOWANIE"></a>KOPIOWANIE</h2><p><strong>Tworzę dwa foldery:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir katalog1</span><br><span class="line">mkdir katalog2</span><br></pre></td></tr></table></figure><p>W <code>katalog1</code> tworzę dwa pliki: <code>touch plik1.txt plik2.txt</code>.<br><code>Katalog2</code> pozostaje pusty.</p><ul><li>chce <code>plik1.txt</code> skopiować do <code>katalog2/</code>:<br>  <code>cp katalog1/plik1.txt katalog2</code></li><li>chce <code>plik1.txt</code> skopiować do <code>katalog2/</code>, ale zmienić nazwę tego pliku:<br>  <code>cp katalog1/plik1.txt katalog2/plik3.txt</code></li><li>chce skopiować całą zawartość <code>katalog1</code> do <code>katalog2/</code>:<br>  <code>cp katalog1/* katalog2/</code></li><li>zmiana nazwy i przenoszenie ‘czegoś’ w inne miejsce:<br>  <code>mv katalog1/plik1.txt katalog2/</code> - rezultat będzie taki, że<br>  <code>plik1.txt</code>zostanie przeniesiony (wycięty) z <code>katalog1</code> i będzie<br>  widoczny w <code>katalog2</code></li><li>chce zmienić nazwę pliku w tym samym katalogu:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd katalog1/</span><br><span class="line">mv plik1.txt nowaNazwaPliku.txt</span><br></pre></td></tr></table></figure><h2 id="EDYTOR-VIM"><a href="#EDYTOR-VIM" class="headerlink" title="EDYTOR VIM"></a>EDYTOR VIM</h2><p>Edytor <code>VIM</code> posiada 3 tryby pracy:</p><ul><li>po wejściu do <code>VIM</code> np.: <code>vim plik1.txt</code> - wtedy mamy <strong>tryb normal</strong></li><li>jeśli kliknę literę <code>a</code> to będę wówczas w <strong>trybie input</strong>, czyli<br>  wprowadzanie, od tej chwili moge pisać w swoim edytorze kod</li><li>żeby zapisać plik to:<ul><li>najpierw klikam <code>ctrl + c</code></li><li>znak <code>:</code> - czyli dwukropek uruchamia nam trzeci tryb, tzw. <strong>tryb command-line</strong></li><li>żeby zapisać plik wciskam <code>w</code> (write)</li><li>żeby wyjść z pliku wciskam <code>:q</code> (quit)</li><li>albo od razu <code>:wq</code></li></ul></li></ul><p>Aby wyświetlić całą zawartość pliku w terminalu wywołuję polecenie <code>cat</code>,<br><code>cat plik1.txt</code>.</p><p><strong>Inne potrzebne polecenia w </strong><code>VIM</code><strong> to:</strong></p><ul><li><code>dd</code> - wycina nam daną linię, w której się ustawimy</li><li><code>p</code> - wkleja nam tekst pod tekstem, gdzie obecnie się znajdujemy kursorem</li><li><code>P</code> lub <code>Shift + p</code> - wkleja nam tekst nad tekstem</li></ul><h3 id="Jak-wyszukiwac-dany-tekst-w-edytorze-VIM"><a href="#Jak-wyszukiwac-dany-tekst-w-edytorze-VIM" class="headerlink" title="Jak wyszukiwać dany tekst w edytorze VIM?"></a>Jak wyszukiwać dany tekst w <code>edytorze VIM</code>?</h3><p>Jeśli chcemy wyszukać np. <code>pająk</code> tzn. słowo w tekście to robimy <code>/pająk</code>.<br>Wyszukają nam się wyrazy o tej wartosci w całym naszym pliku.</p><h3 id="Jak-zmienic-slowo-w-VIM"><a href="#Jak-zmienic-slowo-w-VIM" class="headerlink" title="Jak zmienić słowo w VIM?"></a>Jak zmienić słowo w <code>VIM</code>?</h3><p>Jesli chce zmienić wszystkie słowa<code>pająk</code> na <code>kot</code> to uruchamiam: <code>:%s/pająk/kot</code></p><p>W kolejnych wpisach o Linuxie dowiem się jak instalować rzeczy.<br>Oczywiście z poziomu <code>TERMINALA</code></p><p>Zapraszam do czytania i komentowania! :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Jak wiecie, dodatkiem do mojej nauki &lt;code&gt;Front-end&amp;#39;u&lt;/code&gt; jest nauka &lt;code&gt;Linux&amp;#39;a&lt;/code&gt;.&lt;br&gt;Fizycznie posiadam &lt;code&gt;Ubuntu
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nauka JavaScript od podstaw (1)</title>
    <link href="https://cezarytworzewski.github.io/2018/06/05/podstawy-js-1/"/>
    <id>https://cezarytworzewski.github.io/2018/06/05/podstawy-js-1/</id>
    <published>2018-06-04T22:00:00.000Z</published>
    <updated>2018-06-05T21:44:05.501Z</updated>
    
    <content type="html"><![CDATA[<p>Małe opóźnienie z wpisem na blogu, ale z braku czasu nie dałem rady. Przepraszam za opóźnienia! :)</p><p>Jak wiecie zaczałem naukę ‘czystego’ <code>JavaScript-u</code>. Jak przebiegał powtórny etap tejże nauki?</p><h1 id="Co-to-jest-JavaScript"><a href="#Co-to-jest-JavaScript" class="headerlink" title="Co to jest JavaScript?"></a>Co to jest JavaScript?</h1><p><code>JavaScript</code> to interpretowany, skryptowy język programowania.</p><p>Co to oznacza, że <code>interpretowany</code>? <em>INTERPRETOWANY</em> ponieważ plik, który nie jest kompilowany, jedynie zostanie  zinterpretowany przez program np. przez przeglądarkę i zostanie on wykonany jako np. odtwarzacz video albo galeria zdjęć.</p><h1 id="Co-mozemy-stworzyc-za-pomoca-JavaScriptu"><a href="#Co-mozemy-stworzyc-za-pomoca-JavaScriptu" class="headerlink" title="Co możemy stworzyć za pomocą JavaScriptu:"></a>Co możemy stworzyć za pomocą JavaScriptu:</h1><ul><li>odtwarzacz video</li><li>kalkulator</li><li>chat</li><li>gry</li><li>edytory tekstu</li></ul><h1 id="Jak-zlapac-kontekst-uzycia-JavaScriptu-na-stronie"><a href="#Jak-zlapac-kontekst-uzycia-JavaScriptu-na-stronie" class="headerlink" title="Jak złapać kontekst użycia JavaScriptu na stronie?"></a>Jak złapać kontekst użycia JavaScriptu na stronie?</h1><p>Rozumiem to tak. Załóżmy, że posiadamy miniaturkę zdjęcia z wakacji. Jeśli najadę na zdjęcie myszką, i ustawie <em><code>hover</code></em> w stylach <code>CSS</code> to zdjęcie mi sie podświetli. Analogia do JavaScriptu, to taka według mnie, że jeśli najedziemy myszką na zdjęcie,nastepnie klikniemy, to wywołamy <code>zdarzenie</code>, które np. będzie polegało na wyświetleniu dużego zdjęcia obok miniatury.</p><h1 id="JQuery-JavaScript"><a href="#JQuery-JavaScript" class="headerlink" title="JQuery =! JavaScript ?"></a>JQuery <code>=!</code> JavaScript ?</h1><p>jQuery to inaczej zbiór funkcji napisanych w czystym JavaScript. Dzięki jQuery możemy manipulować drzewem DOM.</p><p>Osobiście spotkałem się z innymi opiniami na ten temat. Sporo osób mi mówiło <code>Czarek, zacznij od jQuery</code> inni zaś <code>Czarek, zacznij od czystego JavaScript, bo to podstawa do zrozumienia wszystkich innych framework&#39;ów</code>.</p><p>Przez to wszystko do tej pory mam jeden wielki mętlik…<br>Patrząć z perspektywy problemu w zrozumieniu i pojęciu JavaScript-u, może ma to sens? Jak myslicie? Dajcie znać o swoich opiniach na ten temat! :-)</p><h1 id="JavaScript-poza-przegladarka"><a href="#JavaScript-poza-przegladarka" class="headerlink" title="JavaScript poza przeglądarką?"></a>JavaScript poza przeglądarką?</h1><ul><li><code>Node.js</code> (programy napisane w nim to np. <code>Gulp</code>, <code>Grunt</code>, <code>Yeoman</code></li><li><code>MongoDB</code> - zapytania w tej bazie wypisujemy za pomocą poleceń JavaScript.</li><li><code>Adobe Photoshop</code> - oznacza to, że rozszerzenia do programu zostały napisane własnie w JavaScript. Przykładem będzie <code>plugin</code> <a href="https://twitter.com/piecioshka" target="_blank" rel="noopener">Piotra Kowalskiego</a> o nazwie <a href="https://github.com/piecioshka/photoshop-plugin-copy-color-after-picking" target="_blank" rel="noopener"><em><code>Photoshop Plugin Copy Color After Picking</code></em></a></li></ul><h1 id="Gdzie-umieszczac-skrypty-JavaScript"><a href="#Gdzie-umieszczac-skrypty-JavaScript" class="headerlink" title="Gdzie umieszczać skrypty JavaScript?"></a>Gdzie umieszczać skrypty JavaScript?</h1><p>a) możemy je umieszczać w elemencie <code>head</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    alert(&apos;Witaj, Cezary!&apos;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p> Powyższy sposób nie powinien być praktykowany, ponieważ podczas otwarcia strony internetowej, pierw wczyta nam się skrypt, a nie reszta strony w postaci tekstu, obrazków</p><p>b) … albo będziemy umieszczać w dowolnym miejscu w <code>body</code>, czyli tak zwane podlinkowanie skryptu:</p><p>Podlinkowanie wygląda następująco: <code>&lt;script src=&quot;js/scripts.js&quot;&gt;&lt;/script&gt;</code></p><ul><li>Dobrą praktyką jest umieszczanie skryptow na końcu, najlepiej przed zamykającym znacznikiem <code>body</code>, czyli <code>&lt;/body&gt;</code></li></ul><h3 id="Dlaczego"><a href="#Dlaczego" class="headerlink" title="Dlaczego?"></a>Dlaczego?</h3><p>Jeśli umieścimy go w <code>head</code> to skrypt sie wykonana, a póki co strona www nie zostanie wczytana, wykona się później. Obejściem na to może być dodanie atrybutu <code>async</code>.</p><h1 id="No-wiec-czym-jest-ZMIENNA"><a href="#No-wiec-czym-jest-ZMIENNA" class="headerlink" title="No więc czym jest ZMIENNA?"></a>No więc czym jest <code>ZMIENNA</code>?</h1><ul><li>zmienne są to podstawowe konstrukcje języka JavaScript - to ABSOLUTNA PODSTAWA!!!</li></ul><p>Deklarowanie zmiennej wygląda następująco:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var imie = &apos;Cezary&apos;;</span><br></pre></td></tr></table></figure></p><p><code>var</code> - to słowo kluczowe języka JavaScript</p><p><code>imie</code> - to nazwa zmiennej</p><p><code>=</code> - jest to znak przypisania zmiennej</p><p><code>Cezary</code> - jest to wartość mojej zmiennej</p><p>Innym sposobem deklaracji zmiennej jest:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var imie = &apos;Cezary`,</span><br><span class="line">    nazwisko = &apos;Tworzewski&apos;;</span><br></pre></td></tr></table></figure></p><h3 id="Co-sie-dzieje-ze-zmienna-gdzie-ona-jest"><a href="#Co-sie-dzieje-ze-zmienna-gdzie-ona-jest" class="headerlink" title="Co się dzieje ze zmienną, gdzie ona jest?"></a>Co się dzieje ze zmienną, gdzie ona jest?</h3><ul><li>wszystkie zmienne zostają zapisane w pamięci <code>RAM - Random Access Memory</code></li></ul><h3 id="Co-moga-przechowywac-zmienne"><a href="#Co-moga-przechowywac-zmienne" class="headerlink" title="Co mogą przechowywać zmienne?"></a>Co mogą przechowywać zmienne?</h3><ul><li>wartości prymitywne (np. ciąg znaków)</li><li>referencje do obiektów (np. Date)</li><li>referencje do funkcji</li></ul><p>Ta lekcja minęła dość łatwo, wszystko z niej rozumiem do tej pory. Nie miałem żadnych trudności z poruszanymi zagadnieniami do tej pory. Bardzo możliwie, że dlatego, że nie raz uczyłem się tego - jest to dla mnie zrozumiałe.<br>Te początkowe lekcje chciałbym przerobić w miarę szybko, ale nie za szybko. Nie chciałbym pominąć żadnych ważnych kwestii, które porusza autor kursu.</p><p>Może kiedyś coś pominąłem, coś bardzo prostego? Może dlatego mam problem? Sam nie wiem. Nie jest to czas ani miejsce, żeby się rozwodzić nad tym tematem.<br>Szukam jakiegoś ratunku już dla siebie.</p><p>Wiem jedno - muszę baaaardzo dużo pracować / uczyć się!!!!</p><p>Blogowanie dopiero zaczynam więc…<br>bardzo dziękuje za doczytanie mnie do końca!!!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Małe opóźnienie z wpisem na blogu, ale z braku czasu nie dałem rady. Przepraszam za opóźnienia! :)&lt;/p&gt;
&lt;p&gt;Jak wiecie zaczałem naukę ‘czys
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Jutro startuję z JavaScript od nowa!</title>
    <link href="https://cezarytworzewski.github.io/2018/06/03/javascript-od-nowa/"/>
    <id>https://cezarytworzewski.github.io/2018/06/03/javascript-od-nowa/</id>
    <published>2018-06-02T22:00:00.000Z</published>
    <updated>2018-06-03T21:37:15.143Z</updated>
    
    <content type="html"><![CDATA[<p>Otóż, jak wiecie mam cholerny problem ze zrozumieniem… dobra nie będe owijał w bawełne.</p><p>Jutro startuję w kursem <a href="https://eduweb.pl/kursy/javascript/javascript-podstawy.html" target="_blank" rel="noopener">JavaScript - od Podstaw</a> serwisu <a href="http://www.eduweb.pl" target="_blank" rel="noopener">Eduweb.pl</a>,<br>którego autorem jest <code>Piotr Palarz</code>. Kurs trwa około 11 godzin, ale dla mnie potrzeba chyba 10 000 godzin na przerobienie.<br>Oczywiście żartuję…</p><p>Przerobienie kursu nie jest żadnym problemem dla mnie - problemem jest to, żebym go w pełni zrozumiał.</p><p>Kiedyś przerabiałem podobne kursy <code>JavaScript</code>.</p><p><img src="https://avatars0.githubusercontent.com/u/30724303?s=400&amp;v=4" alt="df"></p><h6 id="Plan-jest-taki"><a href="#Plan-jest-taki" class="headerlink" title="Plan jest taki:"></a>Plan jest taki:</h6><ul><li>oglądam daną lekcję z kursu na jednym monitorze,</li><li>na drugim monitorze w tym samym czasie -równolegle koduję; czyli przepisuje kod razem z <code>Piotr Palarz</code> :)</li><li>dane zagadnienie notuję w moim <em>NOTATNIKU</em>. Będę notował takie zagadnienia jak co to: <code>zmienna</code>, <code>pętla</code>, <code>intrukcja warunkowa</code>, co to <code>obiekt</code> i <code>metoda</code>.</li></ul><p>Chociaż te terminy przewijają mi się od kilku lat, to wiem co oznaczają, do czego się stosuje. Ale brak mi umiejętności wykorzystania ich w praktyce.</p><p>Więc, jeśli macie jakieś rady, podzielcie się ze mną, jak powinienem podejść do tego tematu!<br>Jutro podzielę się z Wami jak minął mi pierwszy dzień kursu! Opiszę swoje <em><code>porażki</code></em> i <em><code>sukcesy</code></em> z pierwszego dnia!</p><p><em>Pozdrowienia dla wojowników <code>Ninja JS</code>!</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Otóż, jak wiecie mam cholerny problem ze zrozumieniem… dobra nie będe owijał w bawełne.&lt;/p&gt;
&lt;p&gt;Jutro startuję w kursem &lt;a href=&quot;https://e
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Co dalej? Jakie mam plany? Programowanie? JavaScript? Linux?</title>
    <link href="https://cezarytworzewski.github.io/2018/06/02/co-dalej-z-moim-marzeniem/"/>
    <id>https://cezarytworzewski.github.io/2018/06/02/co-dalej-z-moim-marzeniem/</id>
    <published>2018-06-01T22:00:00.000Z</published>
    <updated>2018-06-14T17:33:51.566Z</updated>
    
    <content type="html"><![CDATA[<p>Ostatnio kupiłem sobie napój firmy <code>OSHEE</code>. Spodobał mi się cytat z<br>butelki <em>Ograniczenia istnieją tylko w głowie</em>. Pierwsze skojarzenie<br>jakie wpadło mi do głowy to: <code>programista Front-end</code> i <code>JavaScript</code>.<br>Brzmi motywujaco i pozytywnie. Na mojej twarzy poczulem zadowolenie ale<br>tylko przez chwile… bo od razu przypomniałem sobie ile to już miesięcy<br>próbuje się tego nauczyć - co mi niestety nie wychodzi. :-(</p><p>Mimo tylu porażek i nie powodzeń nie poddaję się!!!<br>W najbliższym czasie postanowiłem wzmorzyć naukę programowania.<br>Uściślając, jak wiecie chce zostac <code>Front-end developerem</code> dlatego około<br>w połowie czerwca razem z kolegą panuję zacząć kilkudniowe - intensywne<br>szkolenie, które przybliży mnie do zostania <em>ekspertem</em> <code>Front-end</code> lub<br><code>JavaScript</code>.</p><p>Sam nie wiem jak to wyjdzie wszystko. Nie wiem czy to zrozumiem - ale<br>się nie poddaję i nie poddam. To jest moje marzenie do którego dążę.</p><p>Chciałbym widzieć jakiś efekt. Zobaczyć, że zaczynam myśleć jako<br>programista. Zobaczyć, że coś zaczyna mi w końcu wychodzić. To na pewno<br>by zadziałało ze zdwojoną siłą. Więc w najbliższym czasie wiecej <code>JS</code>.</p><p>Dużo osób mówi, że najlepiej uczyć się na błędach. Tylko, że JA nie<br>potrafię. Nie umiem wyciągnąć wniosków dlaczego nie umiem tego zrozumieć.</p><p><img src="http://campusnooz.com/cunooz/wp-content/uploads/sites/4/2016/07/dickwad.jpg" alt="alt text" title="http://campusnooz.com/cunooz/wp-content/uploads/sites/4/2016/07/dickwad.jpg"></p><p>Co więcej u mnie ??? Cały czas też chce poznawać lepiej Linuxa, tak żeby<br>pracować na nim…. może do końca życia??? Chyba, że w drogę wejdzie mi<br><code>MacBook</code> firmy <code>Apple</code> - słyszałem o nim pozytywne opinie.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ostatnio kupiłem sobie napój firmy &lt;code&gt;OSHEE&lt;/code&gt;. Spodobał mi się cytat z&lt;br&gt;butelki &lt;em&gt;Ograniczenia istnieją tylko w głowie&lt;/em&gt;. 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux vs. Windows dla Front-end&#39;owca?</title>
    <link href="https://cezarytworzewski.github.io/2018/06/01/linux-vs-windows/"/>
    <id>https://cezarytworzewski.github.io/2018/06/01/linux-vs-windows/</id>
    <published>2018-05-31T22:01:59.820Z</published>
    <updated>2018-05-31T22:01:59.816Z</updated>
    
    <content type="html"><![CDATA[<p>Około 3 tyogodnie temu zdecydowałem. To już KONIEC. Tak, koniec, ale pracy na Windows’ie. Zainstaowałem <code>Ubuntu</code>. System, który moim zdaniem każdy specjalista z branży IT powinien znać.<br>Więc zaczynam programować na <code>Linux&#39;ie</code>. Poznaje jego mechanizmy, instalacje programów z <code>paczek</code> i <code>repozytoriów</code>. Dodawanie użytkowników, zmiana haseł, nadawanie uprawnień <code>chmod</code>. Albo jak wyszukiwać pliki lub foldery za pomocą polecenia <code>find</code>.</p><p>Wszystko staram się robić za pomocą <code>TERMINALA</code>. </p><p>W terminalu oczywiście pracuję z <code>Git&#39;em</code> - gdzie jest to niezbędnik każdego programisty <code>Front-end</code> i <code>Back-end</code> Zacząłem pracować z edytorem <code>VIM</code> - który około 3 miesiące wcześniej chwilkę pracowałem na Windows - było to zupełnie dla mnie nie zrozumiałe. Teraz jest mały progress. Ogólnie jest mi trochę cięzko jeszcze pracować na Linux’ie, bo całe życie pracowałem na systemie z rodziny <code>Windows</code>.<br>W porównaniu z <code>Windows&#39;em</code> zauważyłem, że moje <code>Ubuntu</code> uruchamia się zdecydowanie szybciej. Na pewno plusem jest, że posiadam dysk SSD.</p><p>Jak na razie myslę, że największa trudność sprawia mi nadawanie wyżej wspomnianych uprawnień <code>chmod</code>. Nauczyłem się na razie podstaw programowania w <code>BASH</code>. Niestety nauka w tym idzie mi kiepsko - jak całe programowanie dotychczas.</p><p>Na systemie Ubuntu mam zainstalowanego <code>VirtualBox&#39;a</code>, a na nim inna dystrybucja <code>CentOS v6.9</code>, gdzie na niej też w wolnych chwilach pogłębiam swoją wiedzę.<br>Ostatnio uczyłem się z pomocą <code>CentOS</code> co to jest <code>macierz RAID</code>. Mimo, że skończyłem Informatykę, to teraz zrozumiałem co to jest, po co się stosuje i jaka jest różnica pomięddzy <code>RAID 0</code> i <code>RAID 1</code>. Ogólnie proces tworzenia macierzy jest dla mnie zrozumiały z pomocą <code>VirtualBox</code>. Nie wiem jakby to było jakbym musiał na prawdę zrobić je fizycznie. Może kiedyś to zrobie.</p><p>Oczywiście na Ubuntu mam potrzebne mi oprogrmaowania tj.: <code>Git</code> i <code>WebStorm</code>. Co do edytora <code>WebStorm</code> to przed zmianą systemu z Windows na Linux. Sprawdziałem czy <code>WebStorm</code> jest dostępny na Linuxa. I wtedy podjąłem tą decyzję.</p><p>Na szczęście nie gram w gry - bo wtedy chyba bez Windowsa by się nie obyło.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Około 3 tyogodnie temu zdecydowałem. To już KONIEC. Tak, koniec, ale pracy na Windows’ie. Zainstaowałem &lt;code&gt;Ubuntu&lt;/code&gt;. System, któr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Czym jest Git? Klucze SSH - jak to zrozumieć?</title>
    <link href="https://cezarytworzewski.github.io/2018/05/31/git-ssh/"/>
    <id>https://cezarytworzewski.github.io/2018/05/31/git-ssh/</id>
    <published>2018-05-30T22:00:00.000Z</published>
    <updated>2018-06-01T07:35:32.684Z</updated>
    
    <content type="html"><![CDATA[<p>Drugi post postanowiłem, że będzie poświęcony konfiguracji <code>Git&#39;a</code> krok po<br>kroku.<br>Sam wiele razy miałem sytuację, że posypały mi się <code>klucze SSH</code> w <code>Git</code> lub wystepowały inne błędy.<br>Postanowiłem napisać wszystko kroku po kroku, bynajmniej mam taką nadzieję, żebym na przyszłośc nie musiał szukać,<br>męczyć się jak to skonfigurować. Wszystko będę miał w jednym miejscu. Mam również nadzieję, że spodoba Wam się mój wpis, mój blog i bdzie dla Was pożyteczny.</p><p>Myślę, że w ten sposób będę mógł usystematyzować swoją wiedzę.</p><h4 id="W-skrocie-czym-jest-Git"><a href="#W-skrocie-czym-jest-Git" class="headerlink" title="W skrócie, czym jest Git?"></a>W skrócie, czym jest <code>Git</code>?</h4><ul><li>to system kontroli wersji</li><li>system kontroli wersji śledzi wszystkie zmiany jakie zostały dokonane<br>na pliku, plikach, bądź całym katalogu</li><li>umożliwia przywrócenie wcześniejszej wersji projektu</li></ul><h4 id="Jak-skonfigurowac-Git’a-z-GitHub’em"><a href="#Jak-skonfigurowac-Git’a-z-GitHub’em" class="headerlink" title="Jak skonfigurować Git’a z GitHub’em?"></a>Jak skonfigurować Git’a z GitHub’em?</h4><ol><li><p>Jesli nie posiadamy konta na <code>GitHub</code> musimy je założyć.<br>Tutaj założymy konto: <a href="https://github.com/join?source=header-home" target="_blank" rel="noopener">https://github.com/join?source=header-home</a></p><p> Jeśli posiadamy konto to wszystko jak na razie jest dobrze. :-)</p></li><li><p>Na komputerze lokalnym tworzę folder o nazwie np.:  <code>Pliki</code> oraz tworzę plik <code>index.html</code><br>dalej… muszę połączyć git’a lokalnie z kontem <code>GitHub</code> na serwerze:</p></li></ol><ul><li><p>muszę utworzyć klucz SSH, wykonując polecenie: <code>ssh-keygen -t rsa -C &quot;adres-email&quot;</code></p></li><li><p>następnie, muszę przejść do katalogu użytkownika <code>/.ssh</code>. Z poziomu terminala w Linux’ie do katalogu użytkownika przechodzimy za pomocą<br>polecenia <code>cd ~</code> - znak TYLDA. Są tam dwa pliki, interesuje mnie plik o nazwie: <code>id_rsa.pub</code> –&gt; wchodzę do niego i kopiuję całą jego zawartość.</p></li></ul><p>Zawartość pliku <code>id_rsa.pub</code> jest moim kluczem publiczny, którą to wklejam na koncie <code>GitHub</code> w zakładce <code>Settings</code> –&gt; <code>SSH and GPG keys</code>.</p><p>Następnie w konsoli wydaję polecenie:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p>znak <code>.</code> - kropka oznacza, że chce dodać wszystkie pliki. Jeśli chciałbym dodać tylko jeden plik to wydam polecenie</p><p><code>git add index.html</code>, gdzie plik <code>index.html</code> jest moim plikiem, który chce wysłać na serwer.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git status (opcjonalnie)</span><br><span class="line">git commit -m &quot;commit-message&quot;</span><br><span class="line">git remote add origin git@github.com:NAZWA_UŻYTKOWNIKA_GITHUB/NAZWA_REPOZYTORIUM.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>I pliki są już na <a href="http://www.github.com" target="_blank" rel="noopener">GitHub</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Drugi post postanowiłem, że będzie poświęcony konfiguracji &lt;code&gt;Git&amp;#39;a&lt;/code&gt; krok po&lt;br&gt;kroku.&lt;br&gt;Sam wiele razy miałem sytuację, że
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kim jestem? O czym będzie mój blog?</title>
    <link href="https://cezarytworzewski.github.io/2018/05/30/omnie/"/>
    <id>https://cezarytworzewski.github.io/2018/05/30/omnie/</id>
    <published>2018-05-30T13:52:18.313Z</published>
    <updated>2018-05-30T13:52:18.309Z</updated>
    
    <content type="html"><![CDATA[<p>Witam wszystkich <code>FRONT-ów</code>!!!<br>Mam na imię Cezary. Pochodzę z małej wsi koło Opatowa (woj. świętokrzyskie), ale obecnie mieszkam w Kielcach. Z zawodu? To skomplikowane. Ukończyłem studia inżynierskie na kierunku INFORMATYKA na UJK Kielce. Natomiast pracuję jako ratownik wodny na jednym z Kieleckich basenów.<br>Chce zostać PROGRAMISTĄ, a dokładniej FRONT-END DEVELOPEREM. Miejwam mnóstwo porażek w zdobywaniu odpowiednich szczebli w tej dziedzinie, ale się nie poddaję.<br>Moją <code>piętą Achillesową</code> jest zdecydowanie <code>must have</code> każdego programisty, czyli <code>JavaScript</code>. Wierzę, a raczej jestem pewny, że prędziej czy później uda mi się osiągnąć mój cel.<br>Na stworzenie bloga, namówił mnie kolega - programista Piotr Kowalski <a href="https://piecioshka.pl/" target="_blank" rel="noopener">https://piecioshka.pl/</a></p><h5 id="Ten-blog-powstal-chyba-dopiero-za-4-krotnym-konfigurowaniu-wdrazaniu-go"><a href="#Ten-blog-powstal-chyba-dopiero-za-4-krotnym-konfigurowaniu-wdrazaniu-go" class="headerlink" title="Ten blog powstał, chyba dopiero za 4-krotnym konfigurowaniu, wdrażaniu go."></a>Ten blog powstał, chyba dopiero za 4-krotnym konfigurowaniu, wdrażaniu go.</h5><h2 id="Do-zobaczenia"><a href="#Do-zobaczenia" class="headerlink" title="Do zobaczenia!"></a>Do zobaczenia!</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Witam wszystkich &lt;code&gt;FRONT-ów&lt;/code&gt;!!!&lt;br&gt;Mam na imię Cezary. Pochodzę z małej wsi koło Opatowa (woj. świętokrzyskie), ale obecnie mie
      
    
    </summary>
    
    
  </entry>
  
</feed>
